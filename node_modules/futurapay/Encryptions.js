const crypto = require('crypto');

class Encryptions {
    static make(merchantKey, apiKey, siteId, payload) {
        // Generate a key using MD5 hashing
        const key = crypto.createHash('md5').update(merchantKey + apiKey + siteId).digest('hex');

        const payloadString = JSON.stringify(payload);
        const encryptedDataBase64 = Encryptions.encryptData(payloadString, key);

        return {
            data: encryptedDataBase64,
            key: Buffer.from(apiKey).toString('base64')
        };
    }

    static encryptData(data, key) {
        // Ensure the key is exactly 32 bytes (padding with zeros if necessary)
        const keyBytes = Buffer.concat([Buffer.from(key, 'utf8')], 32);

        // Generate a random 16-byte IV
        const iv = crypto.randomBytes(16);

        // Pad the data using PKCS7 padding
        const blockSize = 16;
        const padLength = blockSize - (data.length % blockSize);
        const paddedData = Buffer.concat([Buffer.from(data, 'utf8'), Buffer.alloc(padLength, padLength)]);

        // Create AES cipher with 32-byte key (AES-256-CBC)
        const cipher = crypto.createCipheriv('aes-256-cbc', keyBytes, iv);

        // Encrypt the data
        const encryptedData = Buffer.concat([cipher.update(paddedData), cipher.final()]);

        // Encode the IV and encrypted data as base64
        const encryptedDataBase64 = Buffer.concat([iv, encryptedData]).toString('base64');

        
        return encryptedDataBase64;
    }
}

module.exports = Encryptions